/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as HeaderImport } from './routes/_header'
import { Route as AuthImport } from './routes/_auth'
import { Route as HeaderIndexImport } from './routes/_header.index'
import { Route as HeaderSignupImport } from './routes/_header.signup'
import { Route as HeaderSigninImport } from './routes/_header.signin'
import { Route as AuthDashboardImport } from './routes/_auth.dashboard'

// Create/Update Routes

const HeaderRoute = HeaderImport.update({
  id: '/_header',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const HeaderIndexRoute = HeaderIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HeaderRoute,
} as any)

const HeaderSignupRoute = HeaderSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => HeaderRoute,
} as any)

const HeaderSigninRoute = HeaderSigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => HeaderRoute,
} as any)

const AuthDashboardRoute = AuthDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_header': {
      id: '/_header'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof HeaderImport
      parentRoute: typeof rootRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardImport
      parentRoute: typeof AuthImport
    }
    '/_header/signin': {
      id: '/_header/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof HeaderSigninImport
      parentRoute: typeof HeaderImport
    }
    '/_header/signup': {
      id: '/_header/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof HeaderSignupImport
      parentRoute: typeof HeaderImport
    }
    '/_header/': {
      id: '/_header/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof HeaderIndexImport
      parentRoute: typeof HeaderImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthDashboardRoute: typeof AuthDashboardRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthDashboardRoute: AuthDashboardRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface HeaderRouteChildren {
  HeaderSigninRoute: typeof HeaderSigninRoute
  HeaderSignupRoute: typeof HeaderSignupRoute
  HeaderIndexRoute: typeof HeaderIndexRoute
}

const HeaderRouteChildren: HeaderRouteChildren = {
  HeaderSigninRoute: HeaderSigninRoute,
  HeaderSignupRoute: HeaderSignupRoute,
  HeaderIndexRoute: HeaderIndexRoute,
}

const HeaderRouteWithChildren =
  HeaderRoute._addFileChildren(HeaderRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof HeaderRouteWithChildren
  '/dashboard': typeof AuthDashboardRoute
  '/signin': typeof HeaderSigninRoute
  '/signup': typeof HeaderSignupRoute
  '/': typeof HeaderIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteWithChildren
  '/dashboard': typeof AuthDashboardRoute
  '/signin': typeof HeaderSigninRoute
  '/signup': typeof HeaderSignupRoute
  '/': typeof HeaderIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_header': typeof HeaderRouteWithChildren
  '/_auth/dashboard': typeof AuthDashboardRoute
  '/_header/signin': typeof HeaderSigninRoute
  '/_header/signup': typeof HeaderSignupRoute
  '/_header/': typeof HeaderIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/dashboard' | '/signin' | '/signup' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/dashboard' | '/signin' | '/signup' | '/'
  id:
    | '__root__'
    | '/_auth'
    | '/_header'
    | '/_auth/dashboard'
    | '/_header/signin'
    | '/_header/signup'
    | '/_header/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  HeaderRoute: typeof HeaderRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  HeaderRoute: HeaderRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_header"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/dashboard"
      ]
    },
    "/_header": {
      "filePath": "_header.tsx",
      "children": [
        "/_header/signin",
        "/_header/signup",
        "/_header/"
      ]
    },
    "/_auth/dashboard": {
      "filePath": "_auth.dashboard.tsx",
      "parent": "/_auth"
    },
    "/_header/signin": {
      "filePath": "_header.signin.tsx",
      "parent": "/_header"
    },
    "/_header/signup": {
      "filePath": "_header.signup.tsx",
      "parent": "/_header"
    },
    "/_header/": {
      "filePath": "_header.index.tsx",
      "parent": "/_header"
    }
  }
}
ROUTE_MANIFEST_END */
