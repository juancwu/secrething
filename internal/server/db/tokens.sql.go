// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tokens.sql

package db

import (
	"context"
)

const createUserToken = `-- name: CreateUserToken :one
INSERT INTO user_tokens (
  user_id,
  token_type,
  expires_at,
  created_at
) VALUES (
  ?1, ?2, ?3, ?4
)
RETURNING user_token_id, user_id, token_type, expires_at, created_at
`

type CreateUserTokenParams struct {
	UserID    string `db:"user_id" json:"user_id"`
	TokenType string `db:"token_type" json:"token_type"`
	ExpiresAt string `db:"expires_at" json:"expires_at"`
	CreatedAt string `db:"created_at" json:"created_at"`
}

func (q *Queries) CreateUserToken(ctx context.Context, arg CreateUserTokenParams) (UserToken, error) {
	row := q.db.QueryRowContext(ctx, createUserToken,
		arg.UserID,
		arg.TokenType,
		arg.ExpiresAt,
		arg.CreatedAt,
	)
	var i UserToken
	err := row.Scan(
		&i.UserTokenID,
		&i.UserID,
		&i.TokenType,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAllUserTokens = `-- name: DeleteAllUserTokens :exec
DELETE FROM user_tokens
WHERE user_id = ?1
`

func (q *Queries) DeleteAllUserTokens(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteAllUserTokens, userID)
	return err
}

const deleteUserToken = `-- name: DeleteUserToken :exec
DELETE FROM user_tokens
WHERE user_id = ?1 AND token_type = ?2
`

type DeleteUserTokenParams struct {
	UserID    string `db:"user_id" json:"user_id"`
	TokenType string `db:"token_type" json:"token_type"`
}

func (q *Queries) DeleteUserToken(ctx context.Context, arg DeleteUserTokenParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserToken, arg.UserID, arg.TokenType)
	return err
}

const deleteUserTokensByType = `-- name: DeleteUserTokensByType :exec
DELETE FROM user_tokens
WHERE user_id = ?1 AND token_type = ?2
`

type DeleteUserTokensByTypeParams struct {
	UserID    string `db:"user_id" json:"user_id"`
	TokenType string `db:"token_type" json:"token_type"`
}

func (q *Queries) DeleteUserTokensByType(ctx context.Context, arg DeleteUserTokensByTypeParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserTokensByType, arg.UserID, arg.TokenType)
	return err
}

const getUserTokenByType = `-- name: GetUserTokenByType :one
SELECT user_token_id, user_id, token_type, expires_at, created_at 
FROM user_tokens
WHERE user_id = ?1 AND token_type = ?2
ORDER BY created_at DESC
LIMIT 1
`

type GetUserTokenByTypeParams struct {
	UserID    string `db:"user_id" json:"user_id"`
	TokenType string `db:"token_type" json:"token_type"`
}

func (q *Queries) GetUserTokenByType(ctx context.Context, arg GetUserTokenByTypeParams) (UserToken, error) {
	row := q.db.QueryRowContext(ctx, getUserTokenByType, arg.UserID, arg.TokenType)
	var i UserToken
	err := row.Scan(
		&i.UserTokenID,
		&i.UserID,
		&i.TokenType,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
