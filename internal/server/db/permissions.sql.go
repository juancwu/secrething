// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: permissions.sql

package db

import (
	"context"

	"github.com/juancwu/secrething/internal/server/permissions"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (
  permission_id,
  vault_id,
  grantee_type,
  grantee_id,
  permission_bits,
  granted_by,
  created_at,
  updated_at
) VALUES (
  ?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8
)
RETURNING permission_id, vault_id, grantee_type, grantee_id, permission_bits, granted_by, created_at, updated_at
`

type CreatePermissionParams struct {
	PermissionID   string                     `db:"permission_id" json:"permission_id"`
	VaultID        string                     `db:"vault_id" json:"vault_id"`
	GranteeType    string                     `db:"grantee_type" json:"grantee_type"`
	GranteeID      string                     `db:"grantee_id" json:"grantee_id"`
	PermissionBits permissions.PermissionBits `db:"permission_bits" json:"permission_bits"`
	GrantedBy      string                     `db:"granted_by" json:"granted_by"`
	CreatedAt      string                     `db:"created_at" json:"created_at"`
	UpdatedAt      string                     `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, createPermission,
		arg.PermissionID,
		arg.VaultID,
		arg.GranteeType,
		arg.GranteeID,
		arg.PermissionBits,
		arg.GrantedBy,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Permission
	err := row.Scan(
		&i.PermissionID,
		&i.VaultID,
		&i.GranteeType,
		&i.GranteeID,
		&i.PermissionBits,
		&i.GrantedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM permissions
WHERE permission_id = ?1
`

func (q *Queries) DeletePermission(ctx context.Context, permissionID string) error {
	_, err := q.db.ExecContext(ctx, deletePermission, permissionID)
	return err
}

const deletePermissionsByGrantee = `-- name: DeletePermissionsByGrantee :exec
DELETE FROM permissions
WHERE grantee_type = ?1 AND grantee_id = ?2
`

type DeletePermissionsByGranteeParams struct {
	GranteeType string `db:"grantee_type" json:"grantee_type"`
	GranteeID   string `db:"grantee_id" json:"grantee_id"`
}

func (q *Queries) DeletePermissionsByGrantee(ctx context.Context, arg DeletePermissionsByGranteeParams) error {
	_, err := q.db.ExecContext(ctx, deletePermissionsByGrantee, arg.GranteeType, arg.GranteeID)
	return err
}

const deletePermissionsByVaultID = `-- name: DeletePermissionsByVaultID :exec
DELETE FROM permissions
WHERE vault_id = ?1
`

func (q *Queries) DeletePermissionsByVaultID(ctx context.Context, vaultID string) error {
	_, err := q.db.ExecContext(ctx, deletePermissionsByVaultID, vaultID)
	return err
}

const getPermissionByGrantee = `-- name: GetPermissionByGrantee :one
SELECT permission_id, vault_id, grantee_type, grantee_id, permission_bits, granted_by, created_at, updated_at
FROM permissions
WHERE vault_id = ?1 AND grantee_type = ?2 AND grantee_id = ?3
`

type GetPermissionByGranteeParams struct {
	VaultID     string `db:"vault_id" json:"vault_id"`
	GranteeType string `db:"grantee_type" json:"grantee_type"`
	GranteeID   string `db:"grantee_id" json:"grantee_id"`
}

func (q *Queries) GetPermissionByGrantee(ctx context.Context, arg GetPermissionByGranteeParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, getPermissionByGrantee, arg.VaultID, arg.GranteeType, arg.GranteeID)
	var i Permission
	err := row.Scan(
		&i.PermissionID,
		&i.VaultID,
		&i.GranteeType,
		&i.GranteeID,
		&i.PermissionBits,
		&i.GrantedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPermissionByID = `-- name: GetPermissionByID :one
SELECT permission_id, vault_id, grantee_type, grantee_id, permission_bits, granted_by, created_at, updated_at
FROM permissions
WHERE permission_id = ?1
`

func (q *Queries) GetPermissionByID(ctx context.Context, permissionID string) (Permission, error) {
	row := q.db.QueryRowContext(ctx, getPermissionByID, permissionID)
	var i Permission
	err := row.Scan(
		&i.PermissionID,
		&i.VaultID,
		&i.GranteeType,
		&i.GranteeID,
		&i.PermissionBits,
		&i.GrantedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPermissionsByGrantee = `-- name: GetPermissionsByGrantee :many
SELECT permission_id, vault_id, grantee_type, grantee_id, permission_bits, granted_by, created_at, updated_at
FROM permissions
WHERE grantee_type = ?1 AND grantee_id = ?2
`

type GetPermissionsByGranteeParams struct {
	GranteeType string `db:"grantee_type" json:"grantee_type"`
	GranteeID   string `db:"grantee_id" json:"grantee_id"`
}

func (q *Queries) GetPermissionsByGrantee(ctx context.Context, arg GetPermissionsByGranteeParams) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionsByGrantee, arg.GranteeType, arg.GranteeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.PermissionID,
			&i.VaultID,
			&i.GranteeType,
			&i.GranteeID,
			&i.PermissionBits,
			&i.GrantedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionsByVaultID = `-- name: GetPermissionsByVaultID :many
SELECT permission_id, vault_id, grantee_type, grantee_id, permission_bits, granted_by, created_at, updated_at
FROM permissions
WHERE vault_id = ?1
`

func (q *Queries) GetPermissionsByVaultID(ctx context.Context, vaultID string) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionsByVaultID, vaultID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.PermissionID,
			&i.VaultID,
			&i.GranteeType,
			&i.GranteeID,
			&i.PermissionBits,
			&i.GrantedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePermission = `-- name: UpdatePermission :one
UPDATE permissions
SET permission_bits = ?2,
    updated_at = ?3
WHERE permission_id = ?1
RETURNING permission_id, vault_id, grantee_type, grantee_id, permission_bits, granted_by, created_at, updated_at
`

type UpdatePermissionParams struct {
	PermissionID   string                     `db:"permission_id" json:"permission_id"`
	PermissionBits permissions.PermissionBits `db:"permission_bits" json:"permission_bits"`
	UpdatedAt      string                     `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, updatePermission, arg.PermissionID, arg.PermissionBits, arg.UpdatedAt)
	var i Permission
	err := row.Scan(
		&i.PermissionID,
		&i.VaultID,
		&i.GranteeType,
		&i.GranteeID,
		&i.PermissionBits,
		&i.GrantedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
