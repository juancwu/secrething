// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: teams.sql

package db

import (
	"context"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (
  team_id,
  name,
  description,
  created_by_user_id,
  created_at,
  updated_at
) VALUES (
  ?1, ?2, ?3, ?4, ?5, ?6
)
RETURNING team_id, name, description, created_by_user_id, created_at, updated_at
`

type CreateTeamParams struct {
	TeamID          string  `db:"team_id" json:"team_id"`
	Name            string  `db:"name" json:"name"`
	Description     *string `db:"description" json:"description"`
	CreatedByUserID string  `db:"created_by_user_id" json:"created_by_user_id"`
	CreatedAt       string  `db:"created_at" json:"created_at"`
	UpdatedAt       string  `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam,
		arg.TeamID,
		arg.Name,
		arg.Description,
		arg.CreatedByUserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Team
	err := row.Scan(
		&i.TeamID,
		&i.Name,
		&i.Description,
		&i.CreatedByUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM teams
WHERE team_id = ?1
`

func (q *Queries) DeleteTeam(ctx context.Context, teamID string) error {
	_, err := q.db.ExecContext(ctx, deleteTeam, teamID)
	return err
}

const getTeamByID = `-- name: GetTeamByID :one
SELECT team_id, name, description, created_by_user_id, created_at, updated_at
FROM teams
WHERE team_id = ?1
`

func (q *Queries) GetTeamByID(ctx context.Context, teamID string) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeamByID, teamID)
	var i Team
	err := row.Scan(
		&i.TeamID,
		&i.Name,
		&i.Description,
		&i.CreatedByUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamsByUserID = `-- name: GetTeamsByUserID :many
SELECT t.team_id, t.name, t.description, t.created_by_user_id, t.created_at, t.updated_at
FROM teams t
JOIN users_teams ut ON t.team_id = ut.team_id
WHERE ut.user_id = ?1
`

func (q *Queries) GetTeamsByUserID(ctx context.Context, userID string) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, getTeamsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.TeamID,
			&i.Name,
			&i.Description,
			&i.CreatedByUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeam = `-- name: UpdateTeam :one
UPDATE teams
SET name = ?2,
    description = ?3,
    updated_at = ?4
WHERE team_id = ?1
RETURNING team_id, name, description, created_by_user_id, created_at, updated_at
`

type UpdateTeamParams struct {
	TeamID      string  `db:"team_id" json:"team_id"`
	Name        string  `db:"name" json:"name"`
	Description *string `db:"description" json:"description"`
	UpdatedAt   string  `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, updateTeam,
		arg.TeamID,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
	)
	var i Team
	err := row.Scan(
		&i.TeamID,
		&i.Name,
		&i.Description,
		&i.CreatedByUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
