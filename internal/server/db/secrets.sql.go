// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: secrets.sql

package db

import (
	"context"
)

const createSecret = `-- name: CreateSecret :one
INSERT INTO secrets (
  secret_id,
  vault_id,
  name,
  value,
  created_by_user_id,
  created_at,
  updated_at
) VALUES (
  ?1, ?2, ?3, ?4, ?5, ?6, ?7
)
RETURNING secret_id, vault_id, name, value, created_by_user_id, created_at, updated_at
`

type CreateSecretParams struct {
	SecretID        string `db:"secret_id" json:"secret_id"`
	VaultID         string `db:"vault_id" json:"vault_id"`
	Name            string `db:"name" json:"name"`
	Value           []byte `db:"value" json:"value"`
	CreatedByUserID UserID `db:"created_by_user_id" json:"created_by_user_id"`
	CreatedAt       string `db:"created_at" json:"created_at"`
	UpdatedAt       string `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateSecret(ctx context.Context, arg CreateSecretParams) (Secret, error) {
	row := q.db.QueryRowContext(ctx, createSecret,
		arg.SecretID,
		arg.VaultID,
		arg.Name,
		arg.Value,
		arg.CreatedByUserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Secret
	err := row.Scan(
		&i.SecretID,
		&i.VaultID,
		&i.Name,
		&i.Value,
		&i.CreatedByUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSecret = `-- name: DeleteSecret :exec
DELETE FROM secrets
WHERE secret_id = ?1
`

func (q *Queries) DeleteSecret(ctx context.Context, secretID string) error {
	_, err := q.db.ExecContext(ctx, deleteSecret, secretID)
	return err
}

const deleteSecretsByVaultID = `-- name: DeleteSecretsByVaultID :exec
DELETE FROM secrets
WHERE vault_id = ?1
`

func (q *Queries) DeleteSecretsByVaultID(ctx context.Context, vaultID string) error {
	_, err := q.db.ExecContext(ctx, deleteSecretsByVaultID, vaultID)
	return err
}

const getSecretByID = `-- name: GetSecretByID :one
SELECT secret_id, vault_id, name, value, created_by_user_id, created_at, updated_at
FROM secrets
WHERE secret_id = ?1
`

func (q *Queries) GetSecretByID(ctx context.Context, secretID string) (Secret, error) {
	row := q.db.QueryRowContext(ctx, getSecretByID, secretID)
	var i Secret
	err := row.Scan(
		&i.SecretID,
		&i.VaultID,
		&i.Name,
		&i.Value,
		&i.CreatedByUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSecretsByVaultID = `-- name: GetSecretsByVaultID :many
SELECT secret_id, vault_id, name, value, created_by_user_id, created_at, updated_at
FROM secrets
WHERE vault_id = ?1
`

func (q *Queries) GetSecretsByVaultID(ctx context.Context, vaultID string) ([]Secret, error) {
	rows, err := q.db.QueryContext(ctx, getSecretsByVaultID, vaultID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Secret
	for rows.Next() {
		var i Secret
		if err := rows.Scan(
			&i.SecretID,
			&i.VaultID,
			&i.Name,
			&i.Value,
			&i.CreatedByUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSecret = `-- name: UpdateSecret :one
UPDATE secrets
SET name = ?2,
    value = ?3,
    updated_at = ?4
WHERE secret_id = ?1
RETURNING secret_id, vault_id, name, value, created_by_user_id, created_at, updated_at
`

type UpdateSecretParams struct {
	SecretID  string `db:"secret_id" json:"secret_id"`
	Name      string `db:"name" json:"name"`
	Value     []byte `db:"value" json:"value"`
	UpdatedAt string `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateSecret(ctx context.Context, arg UpdateSecretParams) (Secret, error) {
	row := q.db.QueryRowContext(ctx, updateSecret,
		arg.SecretID,
		arg.Name,
		arg.Value,
		arg.UpdatedAt,
	)
	var i Secret
	err := row.Scan(
		&i.SecretID,
		&i.VaultID,
		&i.Name,
		&i.Value,
		&i.CreatedByUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
