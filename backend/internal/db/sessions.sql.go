// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sessions.sql

package db

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    session_id,
    user_id,
    token_hash,
    expires_at,
    created_at,
    last_used_at
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6
) RETURNING session_id, user_id, token_hash, expires_at, created_at, last_used_at
`

type CreateSessionParams struct {
	SessionID  SessionID `db:"session_id" json:"session_id"`
	UserID     UserID    `db:"user_id" json:"user_id"`
	TokenHash  string    `db:"token_hash" json:"token_hash"`
	ExpiresAt  string    `db:"expires_at" json:"expires_at"`
	CreatedAt  string    `db:"created_at" json:"created_at"`
	LastUsedAt string    `db:"last_used_at" json:"last_used_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.SessionID,
		arg.UserID,
		arg.TokenHash,
		arg.ExpiresAt,
		arg.CreatedAt,
		arg.LastUsedAt,
	)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM sessions
WHERE expires_at <= strftime('%Y-%m-%dT%H:%M:%SZ', 'now')
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE session_id = ?1
`

func (q *Queries) DeleteSession(ctx context.Context, sessionID SessionID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, sessionID)
	return err
}

const deleteSessionByTokenHash = `-- name: DeleteSessionByTokenHash :exec
DELETE FROM sessions
WHERE token_hash = ?1
`

func (q *Queries) DeleteSessionByTokenHash(ctx context.Context, tokenHash string) error {
	_, err := q.db.ExecContext(ctx, deleteSessionByTokenHash, tokenHash)
	return err
}

const deleteUserSessions = `-- name: DeleteUserSessions :exec
DELETE FROM sessions
WHERE user_id = ?1
`

func (q *Queries) DeleteUserSessions(ctx context.Context, userID UserID) error {
	_, err := q.db.ExecContext(ctx, deleteUserSessions, userID)
	return err
}

const getSessionByTokenHash = `-- name: GetSessionByTokenHash :one
SELECT
    s.session_id,
    s.user_id,
    s.token_hash,
    s.expires_at,
    s.created_at,
    s.last_used_at,
    u.user_id,
    u.email,
    u.password_hash,
    u.first_name,
    u.last_name,
    u.created_at as user_created_at,
    u.updated_at as user_updated_at
FROM sessions s
JOIN users u ON s.user_id = u.user_id
WHERE s.token_hash = ?1 AND s.expires_at > strftime('%Y-%m-%dT%H:%M:%SZ', 'now')
`

type GetSessionByTokenHashRow struct {
	SessionID     SessionID `db:"session_id" json:"session_id"`
	UserID        UserID    `db:"user_id" json:"user_id"`
	TokenHash     string    `db:"token_hash" json:"token_hash"`
	ExpiresAt     string    `db:"expires_at" json:"expires_at"`
	CreatedAt     string    `db:"created_at" json:"created_at"`
	LastUsedAt    string    `db:"last_used_at" json:"last_used_at"`
	UserID_2      UserID    `db:"user_id_2" json:"user_id_2"`
	Email         string    `db:"email" json:"email"`
	PasswordHash  string    `db:"password_hash" json:"password_hash"`
	FirstName     string    `db:"first_name" json:"first_name"`
	LastName      string    `db:"last_name" json:"last_name"`
	UserCreatedAt string    `db:"user_created_at" json:"user_created_at"`
	UserUpdatedAt string    `db:"user_updated_at" json:"user_updated_at"`
}

func (q *Queries) GetSessionByTokenHash(ctx context.Context, tokenHash string) (GetSessionByTokenHashRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionByTokenHash, tokenHash)
	var i GetSessionByTokenHashRow
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.UserID_2,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
	)
	return i, err
}

const updateSessionLastUsed = `-- name: UpdateSessionLastUsed :exec
UPDATE sessions
SET last_used_at = ?2
WHERE session_id = ?1
`

type UpdateSessionLastUsedParams struct {
	SessionID  SessionID `db:"session_id" json:"session_id"`
	LastUsedAt string    `db:"last_used_at" json:"last_used_at"`
}

func (q *Queries) UpdateSessionLastUsed(ctx context.Context, arg UpdateSessionLastUsedParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionLastUsed, arg.SessionID, arg.LastUsedAt)
	return err
}
