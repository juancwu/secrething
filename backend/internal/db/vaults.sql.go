// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: vaults.sql

package db

import (
	"context"
)

const getAllVaultsByOwner = `-- name: GetAllVaultsByOwner :many
SELECT
    vault_id,
    vault_name,
    vault_owner_id,
    created_at,
    updated_at
FROM vaults WHERE vault_owner_id = ?1
`

func (q *Queries) GetAllVaultsByOwner(ctx context.Context, vaultOwnerID UserID) ([]Vault, error) {
	rows, err := q.db.QueryContext(ctx, getAllVaultsByOwner, vaultOwnerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vault
	for rows.Next() {
		var i Vault
		if err := rows.Scan(
			&i.VaultID,
			&i.VaultName,
			&i.VaultOwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVaultByID = `-- name: GetVaultByID :one
SELECT
    vault_id,
    vault_name,
    vault_owner_id,
    created_at,
    updated_at
FROM vaults WHERE vault_id = ?1
`

func (q *Queries) GetVaultByID(ctx context.Context, vaultID VaultID) (Vault, error) {
	row := q.db.QueryRowContext(ctx, getVaultByID, vaultID)
	var i Vault
	err := row.Scan(
		&i.VaultID,
		&i.VaultName,
		&i.VaultOwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVaultByName = `-- name: GetVaultByName :one
SELECT
    vault_id,
    vault_name,
    vault_owner_id,
    created_at,
    updated_at
FROM vaults WHERE vault_name = ?1
`

func (q *Queries) GetVaultByName(ctx context.Context, vaultName string) (Vault, error) {
	row := q.db.QueryRowContext(ctx, getVaultByName, vaultName)
	var i Vault
	err := row.Scan(
		&i.VaultID,
		&i.VaultName,
		&i.VaultOwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
