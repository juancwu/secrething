// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: vaults.sql

package db

import (
	"context"
)

const createVault = `-- name: CreateVault :one
INSERT INTO vaults (
  vault_id,
  name,
  description,
  created_by_user_id,
  owner_type,
  owner_id,
  created_at,
  updated_at
) VALUES (
  ?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8
)
RETURNING vault_id, name, description, created_by_user_id, owner_type, owner_id, created_at, updated_at
`

type CreateVaultParams struct {
	VaultID         string  `db:"vault_id" json:"vault_id"`
	Name            string  `db:"name" json:"name"`
	Description     *string `db:"description" json:"description"`
	CreatedByUserID UserID  `db:"created_by_user_id" json:"created_by_user_id"`
	OwnerType       string  `db:"owner_type" json:"owner_type"`
	OwnerID         string  `db:"owner_id" json:"owner_id"`
	CreatedAt       string  `db:"created_at" json:"created_at"`
	UpdatedAt       string  `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateVault(ctx context.Context, arg CreateVaultParams) (Vault, error) {
	row := q.db.QueryRowContext(ctx, createVault,
		arg.VaultID,
		arg.Name,
		arg.Description,
		arg.CreatedByUserID,
		arg.OwnerType,
		arg.OwnerID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Vault
	err := row.Scan(
		&i.VaultID,
		&i.Name,
		&i.Description,
		&i.CreatedByUserID,
		&i.OwnerType,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteVault = `-- name: DeleteVault :exec
DELETE FROM vaults
WHERE vault_id = ?1
`

func (q *Queries) DeleteVault(ctx context.Context, vaultID string) error {
	_, err := q.db.ExecContext(ctx, deleteVault, vaultID)
	return err
}

const getVaultByID = `-- name: GetVaultByID :one
SELECT vault_id, name, description, created_by_user_id, owner_type, owner_id, created_at, updated_at
FROM vaults
WHERE vault_id = ?1
`

func (q *Queries) GetVaultByID(ctx context.Context, vaultID string) (Vault, error) {
	row := q.db.QueryRowContext(ctx, getVaultByID, vaultID)
	var i Vault
	err := row.Scan(
		&i.VaultID,
		&i.Name,
		&i.Description,
		&i.CreatedByUserID,
		&i.OwnerType,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVaultsByOwner = `-- name: GetVaultsByOwner :many
SELECT vault_id, name, description, created_by_user_id, owner_type, owner_id, created_at, updated_at
FROM vaults
WHERE owner_type = ?1 AND owner_id = ?2
`

type GetVaultsByOwnerParams struct {
	OwnerType string `db:"owner_type" json:"owner_type"`
	OwnerID   string `db:"owner_id" json:"owner_id"`
}

func (q *Queries) GetVaultsByOwner(ctx context.Context, arg GetVaultsByOwnerParams) ([]Vault, error) {
	rows, err := q.db.QueryContext(ctx, getVaultsByOwner, arg.OwnerType, arg.OwnerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vault
	for rows.Next() {
		var i Vault
		if err := rows.Scan(
			&i.VaultID,
			&i.Name,
			&i.Description,
			&i.CreatedByUserID,
			&i.OwnerType,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVaultsByTeamPermission = `-- name: GetVaultsByTeamPermission :many
SELECT v.vault_id, v.name, v.description, v.created_by_user_id, v.owner_type, v.owner_id, v.created_at, v.updated_at
FROM vaults v
JOIN permissions p ON v.vault_id = p.vault_id
WHERE p.grantee_type = 'team' AND p.grantee_id = ?1
`

func (q *Queries) GetVaultsByTeamPermission(ctx context.Context, granteeID string) ([]Vault, error) {
	rows, err := q.db.QueryContext(ctx, getVaultsByTeamPermission, granteeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vault
	for rows.Next() {
		var i Vault
		if err := rows.Scan(
			&i.VaultID,
			&i.Name,
			&i.Description,
			&i.CreatedByUserID,
			&i.OwnerType,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVaultsByUserPermission = `-- name: GetVaultsByUserPermission :many
SELECT v.vault_id, v.name, v.description, v.created_by_user_id, v.owner_type, v.owner_id, v.created_at, v.updated_at
FROM vaults v
JOIN permissions p ON v.vault_id = p.vault_id
WHERE p.grantee_type = 'user' AND p.grantee_id = ?1
`

func (q *Queries) GetVaultsByUserPermission(ctx context.Context, granteeID string) ([]Vault, error) {
	rows, err := q.db.QueryContext(ctx, getVaultsByUserPermission, granteeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vault
	for rows.Next() {
		var i Vault
		if err := rows.Scan(
			&i.VaultID,
			&i.Name,
			&i.Description,
			&i.CreatedByUserID,
			&i.OwnerType,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVault = `-- name: UpdateVault :one
UPDATE vaults
SET name = ?2,
    description = ?3,
    updated_at = ?4
WHERE vault_id = ?1
RETURNING vault_id, name, description, created_by_user_id, owner_type, owner_id, created_at, updated_at
`

type UpdateVaultParams struct {
	VaultID     string  `db:"vault_id" json:"vault_id"`
	Name        string  `db:"name" json:"name"`
	Description *string `db:"description" json:"description"`
	UpdatedAt   string  `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateVault(ctx context.Context, arg UpdateVaultParams) (Vault, error) {
	row := q.db.QueryRowContext(ctx, updateVault,
		arg.VaultID,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
	)
	var i Vault
	err := row.Scan(
		&i.VaultID,
		&i.Name,
		&i.Description,
		&i.CreatedByUserID,
		&i.OwnerType,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
