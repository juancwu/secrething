// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tokens.sql

package db

import (
	"context"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (
    token_id,
    user_id,
    token_type,
    client_type,
    expires_at,
    created_at
) VALUES (
    ?1, ?2, ?3, ?4, ?5, ?6
)
RETURNING token_id, user_id, token_type, client_type, expires_at, created_at
`

type CreateTokenParams struct {
	TokenID    TokenID `db:"token_id" json:"token_id"`
	UserID     UserID  `db:"user_id" json:"user_id"`
	TokenType  string  `db:"token_type" json:"token_type"`
	ClientType string  `db:"client_type" json:"client_type"`
	ExpiresAt  string  `db:"expires_at" json:"expires_at"`
	CreatedAt  string  `db:"created_at" json:"created_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createToken,
		arg.TokenID,
		arg.UserID,
		arg.TokenType,
		arg.ClientType,
		arg.ExpiresAt,
		arg.CreatedAt,
	)
	var i Token
	err := row.Scan(
		&i.TokenID,
		&i.UserID,
		&i.TokenType,
		&i.ClientType,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAllTokens = `-- name: DeleteAllTokens :exec
DELETE FROM tokens
WHERE user_id = ?1
`

func (q *Queries) DeleteAllTokens(ctx context.Context, userID UserID) error {
	_, err := q.db.ExecContext(ctx, deleteAllTokens, userID)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE user_id = ?1 AND token_type = ?2
`

type DeleteTokenParams struct {
	UserID    UserID `db:"user_id" json:"user_id"`
	TokenType string `db:"token_type" json:"token_type"`
}

func (q *Queries) DeleteToken(ctx context.Context, arg DeleteTokenParams) error {
	_, err := q.db.ExecContext(ctx, deleteToken, arg.UserID, arg.TokenType)
	return err
}

const deleteTokensByType = `-- name: DeleteTokensByType :exec
DELETE FROM tokens
WHERE user_id = ?1 AND token_type = ?2
`

type DeleteTokensByTypeParams struct {
	UserID    UserID `db:"user_id" json:"user_id"`
	TokenType string `db:"token_type" json:"token_type"`
}

func (q *Queries) DeleteTokensByType(ctx context.Context, arg DeleteTokensByTypeParams) error {
	_, err := q.db.ExecContext(ctx, deleteTokensByType, arg.UserID, arg.TokenType)
	return err
}

const getTokenByID = `-- name: GetTokenByID :one
SELECT token_id, user_id, token_type, client_type, expires_at, created_at 
FROM tokens
WHERE token_id = ?1
`

func (q *Queries) GetTokenByID(ctx context.Context, tokenID TokenID) (Token, error) {
	row := q.db.QueryRowContext(ctx, getTokenByID, tokenID)
	var i Token
	err := row.Scan(
		&i.TokenID,
		&i.UserID,
		&i.TokenType,
		&i.ClientType,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getTokenByType = `-- name: GetTokenByType :one
SELECT token_id, user_id, token_type, client_type, expires_at, created_at 
FROM tokens
WHERE user_id = ?1 AND token_type = ?2
ORDER BY created_at DESC
LIMIT 1
`

type GetTokenByTypeParams struct {
	UserID    UserID `db:"user_id" json:"user_id"`
	TokenType string `db:"token_type" json:"token_type"`
}

func (q *Queries) GetTokenByType(ctx context.Context, arg GetTokenByTypeParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, getTokenByType, arg.UserID, arg.TokenType)
	var i Token
	err := row.Scan(
		&i.TokenID,
		&i.UserID,
		&i.TokenType,
		&i.ClientType,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
